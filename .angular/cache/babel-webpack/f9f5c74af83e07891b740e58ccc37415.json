{"ast":null,"code":"import { DOCUMENT } from \"@angular/common\";\nimport { Subject } from \"rxjs\";\nimport { Energy, EnergyIntensity, EnergyStatus, ShapeLine } from \"./energy.model\";\nimport * as i0 from \"@angular/core\";\nexport let EnergyService = /*#__PURE__*/(() => {\n  class EnergyService {\n    constructor(document) {\n      this.document = document;\n      this.energyListChanged = new Subject();\n      this.energyItemChanged = new Subject();\n      this.closeConfigurationMenu = new Subject();\n      this.energyList = [new Energy(1, 'Solar panel', '', 'solar.png', false, [], EnergyStatus.sending, EnergyIntensity.max, ShapeLine.round, '#f2bb56'), new Energy(2, 'Battery', '', 'battery.png', false, [], EnergyStatus.consuming, EnergyIntensity.high, ShapeLine.round, '#8a8991'), new Energy(3, 'Wind power', '', 'windmill.png', false, [], EnergyStatus.sending, EnergyIntensity.medium, ShapeLine.round, '#b0bad3'), new Energy(4, 'Charging station', '', 'charging-station.png', true, [new Energy(30, 'Station 1', '', 'charging-station.png', true, [], EnergyStatus.consuming, EnergyIntensity.low, ShapeLine.line, '#7bbae9'), new Energy(31, 'Station 2', '', 'charging-station.png', true, [], EnergyStatus.consuming, EnergyIntensity.min, ShapeLine.line, '#7bbae9'), new Energy(32, 'Station 3', '', 'charging-station.png', true, [], EnergyStatus.consuming, EnergyIntensity.min, ShapeLine.line, '#7bbae9')], EnergyStatus.consuming, EnergyIntensity.medium, ShapeLine.round, '#7bbae9'), new Energy(5, 'Building', '', 'building.png', true, [], EnergyStatus.consuming, EnergyIntensity.max, ShapeLine.round, '#cbd4dc'), new Energy(6, 'Nett', '', 'nett.png', true, [new Energy(60, 'Station 1', '', 'nett.png', true, [], EnergyStatus.sending, EnergyIntensity.min, ShapeLine.line, '#96c8ef'), new Energy(61, 'Station 2', '', 'nett.png', true, [], EnergyStatus.sending, EnergyIntensity.min, ShapeLine.line, '#96c8ef')], EnergyStatus.sending, EnergyIntensity.min, ShapeLine.round, '#96c8ef')];\n      this.energyList.forEach(f => {\n        const randomValue = Math.floor(Math.random() * 100);\n        f.value = randomValue;\n\n        switch (f.index) {\n          case 1:\n            f.secondValue = \"KW\";\n            break;\n\n          case 2:\n            f.secondValue = \"%\";\n            break;\n\n          case 3:\n            f.secondValue = \"KW\";\n            break;\n\n          case 4:\n            f.secondValue = \"KW\";\n            break;\n\n          case 5:\n            f.secondValue = \"KW\";\n            break;\n\n          case 6:\n            f.secondValue = \"KW\";\n            break;\n        }\n\n        const childValue = Math.floor(randomValue / f.childrenSource.length);\n\n        if (f.childrenSource.length > 0) {\n          f.childrenSource.forEach(fchildItem => {\n            fchildItem.value = childValue;\n            fchildItem.secondValue = f.secondValue;\n          });\n        }\n      });\n    }\n\n    getEnergyItem(index) {\n      const energyCopy = this.energyList.map(a => Object.assign({}, a));\n      var energyItem = energyCopy.find(f => f.index == index);\n      if (energyItem.childrenSource.length > 0) energyItem.childrenSource = energyItem.childrenSource.filter(f => f.available);\n      return energyItem;\n    }\n\n    getEnergyItemChildren(indexParent, indexChild) {\n      const energyCopy = this.energyList.map(a => Object.assign({}, a));\n      const energyParent = energyCopy.find(f => f.index == indexParent);\n      return energyParent.childrenSource.find(f => f.index == indexChild);\n    }\n\n    getEnergyListAllItemsAvailable() {\n      const energyCopy = this.energyList.map(a => Object.assign({}, a));\n      return energyCopy.filter(f => f.available).filter(f => f.childrenSource = f.childrenSource.filter(fc => fc.available)).sort((a, b) => a.index > b.index ? 1 : -1);\n    }\n\n    getEnergyListAllItems() {\n      return this.energyList.sort((a, b) => a.index > b.index ? 1 : -1).slice();\n    }\n\n    updateEnergyAvailableItem(item) {\n      //this.energyList.\n      let itemIndex = this.energyList.findIndex(itemArray => itemArray.index == item.index);\n      this.energyList[itemIndex].available = item.available;\n      var itemList = this.getEnergyListAllItemsAvailable();\n      this.energyListChanged.next(itemList);\n    }\n\n    updateEnergyAvailableChild(item) {\n      //this.energyList.\n      let itemIndex = this.energyList.findIndex(itemArray => itemArray.index == item.index);\n      this.energyList[itemIndex].childrenSource = item.childrenSource;\n      var itemList = this.getEnergyListAllItemsAvailable();\n      this.energyListChanged.next(itemList);\n    }\n\n    updateEnergyAllItems(status) {\n      //this.energyList.fin\n      this.energyList.forEach(item => {\n        item.available = status;\n        item.childrenSource.forEach(element => element.available = status);\n      });\n      var itemList = this.getEnergyListAllItemsAvailable();\n      this.energyListChanged.next(itemList);\n    }\n\n    getMainShapeLine() {\n      if (!this.energyList) return ShapeLine.round;\n      return this.energyList[0].shapeLine;\n    }\n\n    updateMainShapeLines(shapeLine) {\n      this.energyList.forEach(item => {\n        item.shapeLine = shapeLine;\n      });\n      var itemList = this.getEnergyListAllItemsAvailable();\n      this.energyListChanged.next(itemList);\n    }\n\n    getChildrenShapeLine() {\n      if (!this.energyList.filter(f => f.childrenSource.length > 0)) return ShapeLine.line;\n      return this.energyList.filter(f => f.childrenSource.length > 0)[0].childrenSource[0].shapeLine;\n    }\n\n    updateSecondaryShapeLines(shapeLine) {\n      this.energyList.filter(f => f.childrenSource.length > 0).forEach(item => {\n        item.childrenSource.forEach(item => item.shapeLine = shapeLine);\n      });\n      var itemList = this.getEnergyListAllItemsAvailable();\n      this.energyListChanged.next(itemList);\n    }\n\n    setCssVar(varname, value) {\n      this.document.body.style.setProperty(varname, value);\n    }\n\n  }\n\n  EnergyService.ɵfac = function EnergyService_Factory(t) {\n    return new (t || EnergyService)(i0.ɵɵinject(DOCUMENT));\n  };\n\n  EnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EnergyService,\n    factory: EnergyService.ɵfac,\n    providedIn: 'root'\n  });\n  return EnergyService;\n})();","map":null,"metadata":{},"sourceType":"module"}