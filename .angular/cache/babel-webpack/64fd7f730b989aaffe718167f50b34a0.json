{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { LineChildComponent } from '../line-child/line-child.component';\nimport { DonutChartChildComponent } from './donut-chart-child/donut-chart-child.component';\nimport { DonutChildDirective } from './donut-child.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../energy.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./donut-child.directive\";\n\nfunction DonutChartComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    fadeOut: a0,\n    fadeIn: a1\n  };\n};\n\nconst _c1 = function (a0, a1, a2) {\n  return {\n    fadeOut: a0,\n    fadeIn: a1,\n    \"d-none\": a2\n  };\n};\n\nexport let DonutChartComponent = /*#__PURE__*/(() => {\n  class DonutChartComponent {\n    constructor(document, energyService, route) {\n      this.document = document;\n      this.energyService = energyService;\n      this.route = route;\n      this.theta = [];\n      this.strokeDonutColor = \"#d9e021\";\n      this.svgSourceItem = \"/assets/image/baterry.png\"; // \"/assets/image/windmill.png\";  \n\n      this.strokePercentual = \"0 100\";\n      this.textDonutHideFirstTime = true;\n      this.fadeIn = false;\n      this.thetaGrandChildren = [];\n    }\n\n    ngOnInit() {\n      this.energyItem = this.energyService.getEnergyItem(this.idElementSource);\n      this.configSourceElement(this.energyItem.color, this.energyItem.imagePath);\n      var endNumber = 100 - this.energyItem.value;\n      this.porcentageNumber = this.energyItem.value;\n      this.secondValue = this.energyItem.secondValue;\n      var strokeEnd = `${this.energyItem.value} ${endNumber}`;\n      this.setNewValue(this.energyItem.index, \"0, 100\", strokeEnd);\n      this.interval = setInterval(() => {\n        this.textDonutHideFirstTime = false;\n        this.fadeIn = !this.fadeIn;\n      }, 6000); //check if the element source has children to show\n\n      if (this.energyItem.childrenSource.length > 0) this.generateGrandChildrenElements();\n    }\n\n    configSourceElement(color, pathImage) {\n      this.color = color;\n      this.svgSourceItem = `/assets/image/${pathImage}`;\n    }\n\n    setNewValue(id, strokeStart, strokeEnd) {\n      this.style = \"\";\n      this.removeStyle(id);\n      var effectName = `donutEffect${id}`;\n      this.setStyleKeyFrame(id, effectName, strokeStart, strokeEnd);\n      setTimeout(() => {\n        this.style = `animation:  ${effectName} 2s;`;\n        this.strokePercentual = strokeEnd;\n      }, 1);\n    }\n\n    setStyleKeyFrame(id, effectName, strokeStart, strokeEnd) {\n      var styleFrame = document.createElement('style');\n      var keyFrames = `\n      @keyframes ${effectName} {\n        0% {\n            stroke-dasharray: ${strokeStart};\n        }\n        100% {\n            stroke-dasharray:  ${strokeEnd};\n        }\n      }\n      `;\n      styleFrame.innerHTML = keyFrames;\n      styleFrame.id = id;\n      document.getElementsByTagName('head')[0].appendChild(styleFrame);\n    }\n\n    removeStyle(id) {\n      var styles = document.getElementsByTagName('style');\n      var styleDelete;\n\n      for (var i = 0, max = styles.length; i < max; i++) {\n        if (styles[i].id == id) {\n          styleDelete = styles[i];\n        }\n      }\n\n      if (styleDelete) styleDelete.parentNode.removeChild(styleDelete);\n    }\n\n    generateGrandChildrenElements() {\n      //calc the distance between the children \n      var thetaTarget = this.theta.find(f => f.id === this.energyItem.index);\n      var thetaChildren = 0;\n      var range = 0;\n\n      for (var i = 0; i < this.energyItem.childrenSource.length; i++) {\n        range += (thetaTarget.borderA - thetaTarget.borderB) / (this.energyItem.childrenSource.length + 1);\n        thetaChildren = range + thetaTarget.borderB;\n        this.thetaGrandChildren.push(thetaChildren);\n      }\n\n      this.createCirclesGrandchildren(this.energyItem.childrenSource); //clean for the next one\n\n      this.thetaGrandChildren = [];\n    } //create grandchildren circles around the parent circle\n\n\n    createCirclesGrandchildren(energyChildrenSource) {\n      let r = this.widhtDiv;\n      let mainHeight = 0; //parseInt(window.getComputedStyle(elementSource.children[0]).height.slice(0, -2));\n\n      energyChildrenSource.forEach((energyItem, i) => {\n        const posx = Math.round(r * Math.cos(this.thetaGrandChildren[i]));\n        const posy = Math.round(r * Math.sin(this.thetaGrandChildren[i]));\n        energyItem.width = 75;\n        energyItem.height = 75;\n        energyItem.top = mainHeight / 2 - posy;\n        energyItem.left = mainHeight / 2 + posx;\n        this.energyService.setCssVar(\"--widthDonutGrandchild\", energyItem.width + 'px'); //maybe change this have to check\n\n        this.energyService.setCssVar(\"--heightDheightDonutGrandchildonutChild\", energyItem.height + 'px');\n        var idElementSource = energyItem.index;\n        var mainDivStyle = `position: absolute;z-index: 1;top: ${energyItem.top}px;left: ${energyItem.left}px;`;\n        const viewContainerRef = this.donutChildHost.viewContainerRef;\n        const componentRef = viewContainerRef.createComponent(DonutChartChildComponent);\n        componentRef.instance.idElementSource = this.energyItem.index;\n        componentRef.instance.idElementSourceChild = idElementSource;\n        componentRef.instance.mainDivStyle = mainDivStyle;\n      });\n      Promise.resolve().then(() => {\n        this.generateChildLines(energyChildrenSource);\n      });\n    }\n\n    generateChildLines(energyChildrenSource) {\n      energyChildrenSource.forEach(sourceItem => {\n        console.log(sourceItem);\n        this.connectLinesChildren(sourceItem, 5);\n      });\n    }\n\n    connectLinesChildren(sourceItem, thickness) {\n      // position of the line in the child div\n      var x1 = sourceItem.left + sourceItem.width / 2;\n      var y1 = sourceItem.top + sourceItem.height / 2; // position of the line in the Middle div\n\n      var x2 = this.energyConfig.width / 2;\n      var y2 = this.energyConfig.height / 2; // distance\n\n      var length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)); // center\n\n      var cx = (x1 + x2) / 2 - length / 2;\n      var cy = (y1 + y2) / 2 - thickness / 2; // angle\n\n      var angle = Math.atan2(y1 - y2, x1 - x2) * (180 / Math.PI); //melhorar esse negocio aqui *************************\n\n      var style = \"padding:0px; margin:0px; height:\" + thickness + \"px; line-height:1px; position:absolute; left:\" + cx + \"px; top:\" + cy + \"px; width:\" + length + \"px; -moz-transform:rotate(\" + angle + \"deg); -webkit-transform:rotate(\" + angle + \"deg); -o-transform:rotate(\" + angle + \"deg); -ms-transform:rotate(\" + angle + \"deg); transform:rotate(\" + angle + \"deg);\";\n      const viewContainerRef = this.donutChildHost.viewContainerRef;\n      const componentRef = viewContainerRef.createComponent(LineChildComponent);\n      componentRef.instance.style = style;\n      componentRef.instance.sourceItem = sourceItem;\n      componentRef.instance.length = length;\n      componentRef.instance.parentDiv = false;\n    }\n\n    ngOnDestroy() {\n      clearInterval(this.interval);\n    }\n\n  }\n\n  DonutChartComponent.ɵfac = function DonutChartComponent_Factory(t) {\n    return new (t || DonutChartComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.EnergyService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  DonutChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DonutChartComponent,\n    selectors: [[\"app-donut-chart\"]],\n    viewQuery: function DonutChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DonutChildDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.donutChildHost = _t.first);\n      }\n    },\n    inputs: {\n      idElementSource: \"idElementSource\",\n      mainDivStyle: \"mainDivStyle\",\n      theta: \"theta\",\n      widhtDiv: \"widhtDiv\",\n      energyConfig: \"energyConfig\"\n    },\n    decls: 16,\n    vars: 22,\n    consts: [[1, \"circle\", 3, \"id\"], [1, \"children\"], [1, \"first-child\", \"svg-item\"], [\"width\", \"100%\", \"height\", \"100%\", \"viewBox\", \"0 0 40 40\", 1, \"donut\"], [\"cx\", \"20\", \"cy\", \"20\", \"r\", \"15.91549430918954\", \"fill\", \"#fff\", 1, \"donut-hole\"], [\"cx\", \"20\", \"cy\", \"20\", \"r\", \"15.91549430918954\", \"fill\", \"transparent\", \"stroke\", \"#e2e4e5\", \"stroke-width\", \"3.5\", 1, \"donut-ring\"], [\"cx\", \"20\", \"cy\", \"20\", \"r\", \"15.91549430918954\", \"fill\", \"transparent\", \"stroke-width\", \"3.5\", \"stroke-dashoffset\", \"25\", 1, \"donut-segment\"], [\"height\", \"20\", \"width\", \"20\", \"x\", \"0%\", \"y\", \"0%\", 3, \"ngClass\"], [1, \"donut-text\", 3, \"ngClass\"], [\"y\", \"25%\", \"transform\", \"translate(0, 2)\"], [\"x\", \"25%\", \"text-anchor\", \"middle\", 1, \"donut-percent\"], [\"y\", \"40%\", \"transform\", \"translate(0, 2)\"], [\"x\", \"25%\", \"text-anchor\", \"middle\", 1, \"donut-data\"], [\"id\", \"donuthastobehere\", \"donutChildHost\", \"\"]],\n    template: function DonutChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(3, \"svg\", 3);\n        i0.ɵɵelement(4, \"circle\", 4);\n        i0.ɵɵelement(5, \"circle\", 5);\n        i0.ɵɵelement(6, \"circle\", 6);\n        i0.ɵɵelement(7, \"image\", 7);\n        i0.ɵɵelementStart(8, \"g\", 8);\n        i0.ɵɵelementStart(9, \"text\", 9);\n        i0.ɵɵelementStart(10, \"tspan\", 10);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"text\", 11);\n        i0.ɵɵelementStart(13, \"tspan\", 12);\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, DonutChartComponent_ng_template_15_Template, 0, 0, \"ng-template\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.mainDivStyle);\n        i0.ɵɵproperty(\"id\", ctx.idElementSource);\n        i0.ɵɵadvance(6);\n        i0.ɵɵstyleMap(ctx.style);\n        i0.ɵɵstyleProp(\"stroke\", ctx.color);\n        i0.ɵɵattribute(\"stroke-dasharray\", ctx.strokePercentual);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(15, _c0, ctx.fadeIn, !ctx.fadeIn));\n        i0.ɵɵattribute(\"href\", ctx.svgSourceItem);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"fill\", ctx.color);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(18, _c1, !ctx.fadeIn, ctx.fadeIn, ctx.textDonutHideFirstTime));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.porcentageNumber);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.secondValue);\n      }\n    },\n    directives: [i3.NgClass, i4.DonutChildDirective],\n    styles: [\"div.circle[_ngcontent-%COMP%]{position:absolute;background-color:transparent;width:var(--widthDonutChild, 100px);height:var(--heightDonutChild, 100px)}div.circle[_ngcontent-%COMP%]   div.children[_ngcontent-%COMP%]{position:relative;width:var(--widthDonutChild, 100px);height:var(--heightDonutChild, 100px)}div.circle[_ngcontent-%COMP%]   div.children[_ngcontent-%COMP%]   div.first-child[_ngcontent-%COMP%]{position:absolute;top:0px;left:0px;z-index:2}div.circle[_ngcontent-%COMP%]   div.children[_ngcontent-%COMP%]   .svg-item[_ngcontent-%COMP%]{width:100%;font-size:16px;margin:0 auto;animation:donutfade 1s}@keyframes donutfade{0%{opacity:.2}to{opacity:1}}@media (min-width: 992px){.svg-item[_ngcontent-%COMP%]{width:80%}}@keyframes donutfadelong{0%{opacity:0}to{opacity:1}}.donut-text[_ngcontent-%COMP%]{font-family:Arial,Helvetica,sans-serif;opacity:0}.donut-label[_ngcontent-%COMP%]{font-size:.28em;font-weight:700;line-height:1;fill:#000;transform:translateY(.25em)}.donut-percent[_ngcontent-%COMP%]{font-size:.75em;line-height:1;transform:translateY(.5em);font-weight:bold}.donut-data[_ngcontent-%COMP%]{font-size:.25em;line-height:1;transform:translateY(.5em);text-align:center;text-anchor:middle;color:#666;fill:#666;animation:donutfadelong 1s}.fadeOut[_ngcontent-%COMP%]{opacity:1;animation-name:diagonal-slide;animation-duration:.05s;animation-iteration-count:10;animation-fill-mode:forwards}@keyframes diagonal-slide{0%{transform:scale(1) translate(25%,25%);animation-timing-function:linear}to{transform:scale(1) translate(24%,26%);animation-timing-function:linear;opacity:0}}.fadeIn[_ngcontent-%COMP%]{opacity:1;animation-name:fadeInOpacity;animation-iteration-count:1;animation-timing-function:ease-in;animation-duration:2s;transform:scale(1) translate(25%,25%)}@keyframes fadeInOpacity{0%{opacity:0}to{opacity:1}}\"]\n  });\n  return DonutChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}